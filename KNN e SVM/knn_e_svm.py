# -*- coding: utf-8 -*-
"""KNN e SVM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GFhdbgg7W3Th4KUrUBGtVXXUz78Wya2L

#1 Recrutamento preditivo
A empresa de tecnologia HighTech busca contratar os melhores profissionais do mercado para fazer parte do time e gerar valor para a empresa. A HighTech vem investindo muito nos últimos anos no uso de ciência de dados no setor do RH para trazer ganhos no processo de seleção e recrutamento. O time de ciência de dados junto com o time de RH vem realizando juntos um projeto de recrutamento preditivo.

O recrutamento preditivo é uma técnica de People Analytics para encontrar os melhores candidatos para contratação da empresa, na prática, o recrutamento preditivo aumenta as chances do recrutador potencializar o processo de seleção. Por meio da coleta e análise de dados, é possível avaliar o perfil e o fit cultural dos profissionais para entender se existe uma boa aderência à vaga.

#Problema de negócio:

O objetivo da HighTech é identificar quais são os melhores indicadores para realizar o recrutamento de profissionais.

#Base de dados

Este conjunto de dados consiste em algumas características como: percentual de ensino médio e superior e especialização, experiência de trabalho e ofertas salariais para os profissionais colocados.

#Desafio

Você como cientista de dados do time de dados da HighTech tem o desafio de criar um modelo preditivo de recrutamento para prever como e quais são as melhores variáveis que podem colocar um profissional bem qualificado na HighTech.
"""

import pandas as pd

dados = pd.read_excel("/content/Recrutamento.xlsx")
dados.head(3)

dados.shape

set(dados.status)

dados.describe()

dados.info()

import missingno as msno

msno.matrix(dados)

dados.isnull().sum()

import seaborn as sb

sb.boxplot(x="status", y="salary", data=dados, palette="hls")

dados["salary"].fillna(value=0, inplace=True)
dados.head()

dados.isnull().sum()

sb.boxplot(x=dados["hsc_p"])

sb.histplot(data=dados, x="hsc_p")

sb.boxplot(x=dados["degree_p"])

sb.histplot(data=dados, x="degree_p")

sb.boxplot(x=dados["etest_p"])

sb.histplot(data=dados, x="etest_p")

sb.boxplot(x=dados["mba_p"])

sb.histplot(data=dados, x="mba_p")

sb.boxplot(x=dados["salary"])

sb.histplot(data=dados, x="salary")

sb.set_theme(style="whitegrid", palette="muted")
ax=sb.swarmplot(data=dados, x="mba_p", y="status", hue="workex")
ax.set(ylabel="Pontuação para MBA")

! pip install plotly_express

import plotly_express as px

px.violin(dados, y="salary", x="specialisation", color="gender", box=True, points="all")

import matplotlib.pyplot as plt

correlation_matriz = dados.corr().round(2)

fig, ax = plt.subplots(figsize=(8,8))
sb.heatmap(data = correlation_matriz, annot=True, linewidths=5, ax=ax)
# sem informações das colunas com textos, preciso dar valores para os textos

from sklearn.preprocessing import LabelEncoder

dados.head()

# para textos que podem sere repreentados de forma binaria (0 e 1) (LabelEncoder)
colunas=["gender", "workex", "specialisation", "status"]
label_encoder = LabelEncoder()
for col in colunas:
  dados[col] = label_encoder.fit_transform(dados[col])

dados.head()

# tratativa de dados para mais valores com mais opções de textos. (OnehotEncoder)
dummy_hsc_s = pd.get_dummies(dados["hsc_s"], prefix="dummy")
dummy_degree_t = pd.get_dummies(dados["degree_t"], prefix="dummy")

dados_dummy=pd.concat([dados, dummy_hsc_s, dummy_degree_t], axis=1)

dados_dummy.head(3)

dados_dummy.drop(["hsc_s", "degree_t", "salary"],axis=1, inplace=True)
dados_dummy.head(2)

correlation_matriz = dados_dummy.corr().round(2)

fig, ax = plt.subplots(figsize=(12,12))
sb.heatmap(data = correlation_matriz, annot=True, linewidths=5, ax=ax)
# COM informações das colunas com textos alteradas para numericas

