# -*- coding: utf-8 -*-
"""Machine_Learning_com_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IIJEA0kdB-fH-2hfc9SKRifgG9i_bb--

# 1.1 - Algebra Linear em Python
"""

# algebra linear -> x + 2 = 5 =>> x = 3   (Resolver sistemas de equações lineares.)
# x + y = 10 (infinitas possibilidades de resolução)
# se x = 0 o y = 10
# se x = 2 o y = 8
# Equeação Diofantica

#x + y = 10
#2x+ y = 11 --->>

"""$$ \alpha + \beta = 10$$"""

import numpy as np
import scipy as sc
import sympy as sy
import pandas as pd
import matplotlib.pyplot as plt

# diferenças entre escalar, vetor e matriz
# Escalar é um número (Tensor de ordem 0)-->> x=2
x=2 #Escalar
#Vetor é uma estrutura unidimencional, precisa um plano (cartesiano) (tensor de ondem 1)
#matriz é um plano tridimencional,
x2 = np.array([1,2,3]) # vetor com três elementos escalares
x3 = np.array([[1],[2],[3]]) # Matriz(coluna) com 3 elementos vetores com elementos escalares
x4 = np.array([[1,2,3],[1,2,3],[1,2,3]]) # Matriz quadrada tradicional
print(x2)
print()
print(x3)
print()
print(x4)

lista = [1,2,3,4,5]
#df = pd.DataFrame(lista)  -> irá criar um DataFrame com Index 0
df = pd.DataFrame({'coluna1':lista, 'coluna2':lista})   #-> vai criar com o index coluna 1 {} -> dicionário
df

type(df.coluna1)    #->cada coluna é uma array que é igual a series

lista[:1]

x2+x3   #->combinação linear (somatorio de elementos multiplicados entre si)

# Multiplicar

# arr1 (x,y) arr2 (z,w)  ---> y = z  / arr3 (x, w)
#np.dot ou @
#a.b != b.a
np.dot(x4, x3)

x4@x3

#divisão

#2.x = 4 ---> x=4/2
#>> A.X = Y  ----->> Equação Fundamental da Algebra Linear
x4 / x3

"""#1.1.1 Matrizes Especiais"""

'''
Para os Escalares,
O zero é um elementro neutro para a soma  e subtração
o Um é um elemento neutro na multiplicação e divisão
'''

zeros=np.zeros((3,3))
ones=np.ones((3,3))
print(zeros)
print()
print(ones)

"""#1.1.2 Matrizes Inversas (Matriz Quadrada)"""

x4

"""$$A = \pmatrix{a_{00} & a_{01} & a_{02}\\ a_{10} & a_{11} & a_{12}\\a_{20} & a_{21} & a_{22}}
$$
"""

id = np.eye(3)
id

x4*id

"""$$x  .  x^{-1}  =  1$$

-------
$$Matriz Inversa$$
$$A  .  A^{-1}  =  I -->>> Somente em matrizes quadradas.$$

-----

$$Equação Fundamental da Algebra $$

$$A . X = Y--> Fundamento$$
$$A . A^{-1}.X = A^{-1}. Y--> Multiplica nos dois lados$$
 $$ X = A^{-1} . Y    -->REsultado$$ $$--> Se A for uma matriz quadrada$$
"""

'''
Um número multiplicado pelo se uinverso deve ter o resultado 1
o numero 2, o seu inverso é 1/2
2 * 1/2 = 1
'''

'''
Uma MAtriz multiplicada pelo seu inverso deve gerar uma matriz identidade.
MAtriz A
'''

"""# 1.1.3 Matrizes Pseudo Inversas (não Quadradas)

$$Matrizes Pseudo Inversas$$
$$X = (A.^{T}A)^{-1}A^{T}.Y ---> T = Matriz Transposta$$
"""

x1,y1 = -1,0
x2,y2 = 0,1
x3,y3 = 1,2
x4,y4 = 2,1

x = [x1,x2,x3,x4]
y = [y1,y2,y3,y4]

plt.figure(figsize=(10,5))

plt.scatter(x1,y1, color='green', label='Pares Ordenados (X,Y)')
plt.scatter(x2,y2, color='green')
plt.scatter(x3,y3, color='green')
plt.scatter(x4,y4, color='green')

plt.plot(x,y, label='Gráfico que liga os Pontos')
plt.grid(True)
plt.box(False)
plt.legend()
plt.title('Interpolação da Reta Sobre Todos os Pontos')

#y = mx + n
#0 = -m + n
A = np.array([[-1,1], [0,1], [1,1], [2,1]])
y = np.array([[y1], [y2], [y3], [y4]])

(m,n) = np.dot(np.dot(np.linalg.pinv(np.dot(A.T,A)),A.T),y) # -->X=(A.TA)−1AT.Y

print(m,n)

x1,y1 = -1,0
x2,y2 = 0,1
x3,y3 = 1,2
x4,y4 = 2,1

x = [x1,x2,x3,x4]
y = [y1,y2,y3,y4]

plt.figure(figsize=(10,5))

plt.scatter(x1,y1, color='green', label='Pares Ordenados (X,Y)')
plt.scatter(x2,y2, color='green')
plt.scatter(x3,y3, color='green')
plt.scatter(x4,y4, color='green')

v_x=np.linspace(-1,2)
plt.plot(x,y, label='Gráfico que liga os Pontos')
plt.plot(v_x, m*v_x+n, label='Reta Otimizada pelo Método dos Minimos Quadrados')
plt.grid(True)
plt.box(False)
plt.legend()
plt.title('Interpolação da Reta Sobre Todos os Pontos')

"""# 1.2 Estatística em Python"""



"""# 1.3 Os Primeiros passos em Machine Learning"""

import pandas as pd

df_excel = pd.read_excel("Chess.xlsx", sheet_name = "Chess")

df_csv = pd.read_csv("Tomato.csv", sep = ",")

df_excel.shape

df_csv.shape

df_excel.info()

df_csv.info()

df_csv.tail()

df_excel.tail()

df_excel.describe()

df_csv.describe()

df_excel.describe().T

df_csv.describe().T

df_excel.head()

#visualizar a variaçãos das categorias de dados.
set(df_excel["victory_status"])

df_csv.head()

# a coluna Average mostra a medida minima e máxima do tomate para a função
df_csv.describe()

def categorizar_tomate_media(media):
  if media >= 40 and media <= 70:
    return "tomate medio"
  elif media < 40:
    return "tomate pequeno"
  else:
    return "tomatão"

df_csv["Categoria_Tomate"] = df_csv["Average"].apply(categorizar_tomate_media)

df_csv

df_csv.groupby(["Categoria_Tomate"]).describe()

filtro = df_csv["Average"] < 40
df_csv.loc[filtro]